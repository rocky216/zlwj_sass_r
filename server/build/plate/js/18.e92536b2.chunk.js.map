{"version":3,"sources":["public/components/Modular/getnode.tsx","public/components/Modular/SearchModular.tsx","plate/actions/otherAction.ts","public/components/Element/StatusElement.tsx","public/components/Modular/AddModular.tsx","plate/views/otherconf/columns/index.tsx","plate/views/otherconf/bwlist/index.tsx"],"names":["TextArea","Input","Option","Select","RangePicker","DatePicker","getNode","item","type","disabled","style","width","selectList","map","elem","key","id","value","label","notAll","SearchModular","before","data","submitSearch","initialValues","resetValues","layout","bordered","Form","useForm","form","handleRules","rules","required","message","size","className","marginRight","marginBottom","onFinish","values","index","Item","name","initialValue","valuePropName","ghost","htmlType","icon","onClick","setFieldsValue","ACTION","initAllInfo","params","next","dispatch","getState","a","options","url","method","stateApi","setDeviceInit","_","omit","gCompanyHe","companyHe","getInitInfo","getDeviceInit","opt","storetApi","getConfigRule","getPlateMoneyByTime","gRtime","rtime","selectDate","moment","format","getPlateIncome","getPlatePassRecord","getIncomeCount","getSelectThirty","getDeviceonLineLog","getDeviceInfo","addOrUpTypeCallback","changeDeviceTypeConf","getDeviceTypeConf","changeDeviceConf","getDeviceConf","isHave","changeSysBwlist","getSysBwlist","changeBwlist","getBwlist","changeRegstrict","getRegstrict","openState","relieveElecfence","changeElecfence","getElecfence","getPlatePassRecordPages","isMoney","parkId","length","createCodeState","changeAccessCode","getAccessCode","StatusElement","onChange","v","labelCol","span","wrapperCol","AddModular","visible","onOk","onCancel","title","spinning","useState","modalVisible","setModalVisible","useEffect","resetFields","destroyOnClose","submit","confirmLoading","afterClose","bwlistColumns","dataIndex","render","BwType","regstrictColumns","elecfenceColumns","OpenState","current","license","linkPhone","linkName","status","resetParams","Bwlist","state","addVisible","editVisible","detail","this","props","actions","rows","objective","res","utils","OpenNotification","obj","setState","onConfirm","refresh","bwlist","columns","getCol","dataSource","addIndex","list","pagination","Pagination","page","React","Component","connect","other","app","bindActionCreators"],"mappings":"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","file":"plate/js/18.e92536b2.chunk.js","sourcesContent":["import React, { ReactNode } from \"react\"\r\nimport {Input, InputNumber, Select, DatePicker} from \"antd\"\r\nconst {TextArea} = Input\r\nconst {Option} = Select\r\nconst {RangePicker} = DatePicker\r\n\r\ninterface selectListProps {\r\n  label: string,\r\n  id: any;\r\n}\r\n\r\nexport interface ItemType {\r\n  label?: ReactNode,\r\n  name: string,\r\n  type: any,\r\n  selectList?: selectListProps[];\r\n  initialValue?:any;\r\n  valuePropName?:string;\r\n  notAll?:boolean;\r\n  rules?:any;\r\n  disabled?:boolean;\r\n}\r\n\r\nexport const getNode = (item:ItemType)=>{\r\n  switch(item.type){\r\n    case \"input\":\r\n      return <Input disabled={item.disabled} />\r\n    case \"textarea\":\r\n      return <TextArea disabled={item.disabled} />\r\n    case \"inputNumber\":\r\n      return <InputNumber style={{width: \"100%\"}} disabled={item.disabled} />\r\n    case \"datepicker\":\r\n      return <DatePicker style={{width: \"100%\"}} disabled={item.disabled} />\r\n    case \"rangepicker\":\r\n      return <RangePicker style={{width: \"100%\"}} disabled={item.disabled} />\r\n    case \"select\":\r\n      return (\r\n        <Select disabled={item.disabled} >\r\n          {item.selectList?.map(elem=>(\r\n            <Option key={elem.id} value={elem.id} >{elem.label}</Option>\r\n          ))}\r\n        </Select>\r\n      )\r\n    case \"status\":\r\n      return (\r\n        <Select disabled={item.disabled} >\r\n          {item.notAll?null:<Option value=\"\">全部</Option>}\r\n          <Option value={1}>启用</Option>\r\n          <Option value={0}>禁用</Option>\r\n        </Select>\r\n      )\r\n  }\r\n\r\n  return item.type;\r\n}","import React, { ReactNode } from \"react\"\r\nimport { Button, Card, Form, Input, InputNumber} from \"antd\"\r\nimport {ItemType, getNode} from \"./getnode\"\r\nimport { RetweetOutlined, SearchOutlined } from \"@ant-design/icons\";\r\nimport { FormLayout } from \"antd/lib/form/Form\";\r\n\r\n\r\n\r\ninterface Props {\r\n  before?: ReactNode;\r\n  data: ItemType[];\r\n  submitSearch: Function;\r\n  initialValues: any;\r\n  resetValues?:any;\r\n  layout?:FormLayout; //inline | vertical | horizontal\r\n  bordered?:boolean;\r\n}\r\n\r\nconst SearchModular:React.FC<Props> = ({\r\n  before,\r\n  data,\r\n  submitSearch,\r\n  initialValues,\r\n  resetValues,\r\n  layout=\"inline\",\r\n  bordered\r\n})=>{\r\n  const [form] = Form.useForm();\r\n\r\n  const submitReset = ()=>{\r\n    form.setFieldsValue(resetValues)\r\n    submitSearch()\r\n  }\r\n\r\n  const handleRules = (item:ItemType)=>{\r\n    if(typeof item.rules === 'boolean'){\r\n      return [{required: true, message: `${item.label||\"\"}不能为空！`}]\r\n    }else if(typeof item.rules === 'object'){\r\n      return item.rules;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  return (\r\n    <Card size=\"small\" bordered={bordered} >\r\n      <div className={layout==\"inline\"?\"flexbetween\":\"\"} >\r\n        <div style={layout==\"inline\"?{marginRight:30}:{marginBottom: 20}}  >\r\n          {before}\r\n        </div>\r\n        <div>\r\n          <Form form={form} \r\n            layout={layout}\r\n            onFinish={(values)=>submitSearch({...values})}\r\n            initialValues={initialValues}\r\n          > \r\n            {data.map((item, index)=>(\r\n              <Form.Item\r\n                key={index}\r\n                label={item.label||null}\r\n                name={item.name}\r\n                initialValue={item.initialValue}\r\n                valuePropName={item.valuePropName || \"value\"}\r\n                rules={handleRules(item)}\r\n              >\r\n                {getNode(item)}\r\n              </Form.Item>\r\n            ))}\r\n            <Form.Item >\r\n              <Button type=\"primary\" ghost htmlType=\"submit\" icon={<SearchOutlined />}>搜索</Button>\r\n              {resetValues?\r\n              <Button className=\"mgl10\" onClick={submitReset} icon={<RetweetOutlined />}>重置</Button>:null}\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n    \r\n  )\r\n}\r\n\r\nexport default SearchModular;","import {OTHER_LOADING_START, OTHER_LOADING_END, OTHER_LOADING_NOT} from \"@plate/constant/otherTypes\"\r\nimport { gCompanyHe, gRtime } from \"@public/utils\"\r\nimport {storetApi, stateApi, OptProps} from \"@public/utils/action\"\r\nimport _ from \"lodash\"\r\nimport moment from \"moment\"\r\nconst ACTION = \"OTHER\"\r\n\r\n\r\nexport const initAllInfo = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-parking-config/initAllInfo\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const setDeviceInit = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-device/deviceInit\",\r\n      method: \"post\",\r\n      data: {\r\n        ...(_.omit(params, [\"companyHe\"])),\r\n        ...gCompanyHe( params.companyHe)\r\n      }\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\n\r\nexport const getInitInfo = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-parking-config/initInfo\",\r\n      method: \"post\",\r\n      data: {\r\n        ...(_.omit(params, [\"companyHe\"])),\r\n        ...gCompanyHe( params.companyHe)\r\n      }\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const getDeviceInit = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-device/getDeviceInit\",\r\n      method: \"get\",\r\n      data: {\r\n        ...(_.omit(params, [\"companyHe\"])),\r\n        ...gCompanyHe( params.companyHe)\r\n      }\r\n    }\r\n    storetApi(options, \"deviceinit\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\n\r\nexport const getConfigRule = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-parking-config/selectConfigRule\",\r\n      method: \"get\",\r\n      data: {\r\n        ...(_.omit(params, [\"companyHe\"])),\r\n        ...gCompanyHe( params.companyHe)\r\n      }\r\n    }\r\n    storetApi(options, \"configrule\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const getPlateMoneyByTime = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-data/selectPlateMoneyByTime\",\r\n      method: \"get\",\r\n      data: {\r\n        ...(_.omit(params, [\"companyHe\", \"rtime\"])),\r\n        ...gCompanyHe( params.companyHe),\r\n        ...gRtime(params.rtime, \"startTime\", \"endTime\"),\r\n        selectDate: moment(params.selectDate).format(params.type==\"year\" ? \"YYYY\" : \"YYYY-MM\"),\r\n        type: params.type==\"year\"?\"Y\":params.type==\"month\"?\"M\":\"D\"\r\n      }\r\n    }\r\n    storetApi(options, \"platebytime\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const getPlateIncome = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-data/selectPlateIncome\",\r\n      method: \"get\",\r\n      data: {\r\n        ...(_.omit(params, [\"companyHe\", \"rtime\"])),\r\n        ...gCompanyHe( params.companyHe),\r\n        ...gRtime(params.rtime, \"startTime\", \"endTime\"),\r\n        selectDate: moment(params.selectDate).format(params.type==\"year\" ? \"YYYY\" : \"YYYY-MM\"),\r\n        type: params.type==\"year\"?\"Y\":params.type==\"month\"?\"M\":\"D\"\r\n      }\r\n    }\r\n    storetApi(options, \"changecount\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const getPlatePassRecord = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-data/platePassRecord\",\r\n      method: \"get\",\r\n      data: {\r\n        ...(_.omit(params, [\"companyHe\", \"rtime\"])),\r\n        ...gCompanyHe( params.companyHe),\r\n        ...gRtime(params.rtime, \"startTime\", \"endTime\"),\r\n        selectDate: moment(params.selectDate).format(params.type==\"year\" ? \"YYYY\" : \"YYYY-MM\"),\r\n        type: params.type==\"year\"?\"Y\":params.type==\"month\"?\"M\":\"D\"\r\n      }\r\n    }\r\n    storetApi(options, \"platerecord\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\n\r\nexport const getIncomeCount = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-data/incomeCount\",\r\n      method: \"get\",\r\n      data: {\r\n        ...(_.omit(params, [\"companyHe\", \"rtime\"])),\r\n        ...gCompanyHe( params.companyHe),\r\n        ...gRtime(params.rtime, \"startTime\", \"endTime\"),\r\n        selectDate: moment(params.selectDate).format(params.type==\"year\" ? \"YYYY\" : \"YYYY-MM\"),\r\n        type: params.type==\"year\"?\"Y\":params.type==\"month\"?\"M\":\"D\"\r\n      }\r\n    }\r\n    storetApi(options, \"incomecount\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const getSelectThirty = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-online/selectThirty\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const getDeviceonLineLog = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-online/onlineInfo\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const getDeviceInfo = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-device/getById\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const addOrUpTypeCallback = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-device-type/addOrUpTypeCallback\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const changeDeviceTypeConf = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-device-type/composite\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const getDeviceTypeConf = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-device-type/page\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n    storetApi(options, \"devicetype\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const changeDeviceConf = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-device/composite\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\n\r\nexport const getDeviceConf = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-device/page\",\r\n      method: \"get\",\r\n      data: {\r\n        ...(_.omit(params, [\"companyHe\"])),\r\n        ...gCompanyHe(params.companyHe),\r\n        isHave: params.isHave?1:0,\r\n      }\r\n    }\r\n    storetApi(options, \"deviceconf\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const changeSysBwlist = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-system-black-white-list/composite\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const getSysBwlist = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-system-black-white-list/page\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n    storetApi(options, \"sysbwlist\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const changeBwlist = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-item-black-white-list/composite\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const getBwlist = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-item-black-white-list/page\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n    storetApi(options, \"bwlist\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const changeRegstrict = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-item-license-region-forbid/composite\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const getRegstrict = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-item-license-region-forbid/page\",\r\n      method: \"get\",\r\n      data: {\r\n        ...params,\r\n        openState: params.openState?1:0\r\n      }\r\n    }\r\n    storetApi(options, \"regstrict\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const relieveElecfence = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-license-fence/relieveEnclosure\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const changeElecfence = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-license-fence/composite\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const getElecfence = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-license-fence/page\",\r\n      method: \"get\",\r\n      data: {\r\n        ...params,\r\n        openState: params.openState?1:0\r\n      }\r\n    }\r\n    storetApi(options, \"elecfence\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const getPlatePassRecordPages = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-pass-record/selectPlatePassRecordPages\",\r\n      method: \"get\",\r\n      data: {\r\n        ...(_.omit(params, [\"rtime\"])),\r\n        ...gRtime(params.rtime, \"startTime\", \"endTime\"),\r\n        isMoney: params.isMoney?1:0,\r\n        parkId: params.parkId.length?params.parkId[params.parkId.length-1]:\"\"\r\n      } \r\n    }\r\n    storetApi(options, \"accesslog\", dispatch, ACTION, opt)\r\n  }\r\n}\r\n\r\nexport const createCodeState = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-active-code/createState\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const changeAccessCode = (params:any, next?:(...arg:any)=>void)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-active-code/composite\",\r\n      method: \"post\",\r\n      data: params\r\n    }\r\n    stateApi(options, dispatch, ACTION, next)\r\n  }\r\n}\r\n\r\nexport const getAccessCode = (params:any, opt:OptProps)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const options:any = {\r\n      url: \"/zlwj/api/plate/sys/plate-active-code/page\",\r\n      method: \"get\",\r\n      data: {\r\n        ...(_.omit(params, [\"rtime\"])),\r\n        ...gRtime(params.rtime, \"startTime\", \"endTime\")\r\n      } \r\n    }\r\n    storetApi(options, \"accesscode\", dispatch, ACTION, opt)\r\n  }\r\n}","import React from \"react\"\r\nimport {Select} from \"antd\"\r\nimport { SizeType } from \"antd/lib/config-provider/SizeContext\";\r\n\r\nconst {Option} = Select;\r\n\r\n\r\ninterface Props {\r\n  value?:any;\r\n  onChange?:any;\r\n  notAll?:boolean;\r\n  size?:SizeType;\r\n}\r\n\r\nconst StatusElement: React.FC<Props> = ({value, onChange, notAll, size})=>{\r\n  return (\r\n    <Select size={size} value={value} onChange={(v)=>{\r\n      if(onChange){\r\n        onChange(v)\r\n      }\r\n    }} >\r\n      {notAll?null:<Option value=\"\" >全部</Option>}\r\n      <Option value={1} >启用</Option>\r\n      <Option value={0} >禁用</Option>\r\n    </Select>\r\n  )\r\n}\r\n\r\nexport default StatusElement","import React, { useEffect, useState } from \"react\"\r\nimport { Form, Modal } from \"antd\"\r\nimport {ItemType, getNode} from \"./getnode\"\r\n\r\n\r\ninterface ItemTypeProps extends ItemType {\r\n  rules?: boolean | any[];\r\n  wrapperCol?:any;\r\n  labelCol?:any;\r\n  valuePropName?:any;\r\n}\r\n\r\ninterface Props {\r\n  visible: boolean;\r\n  width?:number;\r\n  onOk: (...arg0:any)=>void;\r\n  onCancel:()=>void;\r\n  title?:any;\r\n  data:ItemTypeProps[];\r\n  initialValues?:any;\r\n  spinning?:boolean;\r\n  \r\n}\r\n\r\nconst layout = {\r\n  labelCol: { span: 5 },\r\n  wrapperCol: { span: 16 },\r\n};\r\n\r\nconst AddModular:React.FC<Props> = ({\r\n  visible,\r\n  width,\r\n  onOk,\r\n  onCancel,\r\n  title,\r\n  data,\r\n  initialValues,\r\n  spinning,  \r\n})=>{\r\n  const [form] = Form.useForm();\r\n  const [modalVisible, setModalVisible] = useState(false)\r\n\r\n  useEffect(()=>{\r\n    if(visible){\r\n      setModalVisible(true)\r\n      if(initialValues){\r\n        form.setFieldsValue(initialValues)\r\n      }else{\r\n        form.resetFields()\r\n      }\r\n      \r\n    }\r\n\r\n  }, [visible])\r\n\r\n  const handleRules = (item:ItemTypeProps)=>{\r\n    if(typeof item.rules === 'boolean'){\r\n      return [{required: true, message: `${item.label || \"\"}不能为空！`}]\r\n    }else if(typeof item.rules === 'object'){\r\n      return item.rules;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  return (\r\n    !visible && !modalVisible?null:\r\n    <Modal\r\n      title={title || null}\r\n      visible={visible}\r\n      width={width || 560}\r\n      onCancel={()=>{\r\n        form.resetFields()\r\n        onCancel()\r\n      }}\r\n      destroyOnClose\r\n      onOk={()=>form.submit()}\r\n      confirmLoading={spinning}\r\n      afterClose={()=>{\r\n        setModalVisible(false)\r\n      }}\r\n    >\r\n      <Form \r\n        name=\"addModular\" \r\n        {...layout}\r\n        form={form} onFinish={(values)=>onOk(values)} initialValues={initialValues} >\r\n        {data.map((item, index)=>(\r\n          <Form.Item \r\n            key={index} \r\n            label={item.label} \r\n            name={item.name} \r\n            initialValue={item.initialValue}\r\n            rules={handleRules(item)}\r\n            wrapperCol={item.wrapperCol}\r\n            labelCol={item.labelCol}\r\n            valuePropName={item.valuePropName}\r\n            >\r\n            {getNode(item)}\r\n          </Form.Item>\r\n        ))}\r\n      </Form>\r\n\r\n    </Modal>\r\n  )\r\n}\r\n\r\n\r\nexport default AddModular;","import { BwType, OpenState } from \"@public/common/plateMapper\"\r\nimport React from \"react\"\r\n\r\n\r\nexport const bwlistColumns = [\r\n  {\r\n    title: \"黑白名单类型\",\r\n    dataIndex: \"type\",\r\n    render:(item:any)=>BwType[item]\r\n  },\r\n  {\r\n    title: \"车牌号码\",\r\n    dataIndex: \"license\"\r\n  },\r\n  {\r\n    title: \"联系人名称\",\r\n    dataIndex: \"linkName\"\r\n  },\r\n  {\r\n    title: \"联系电话\",\r\n    dataIndex: \"linkPhone\"\r\n  },\r\n  {\r\n    title: \"黑白名单说明\",\r\n    dataIndex: \"remark\"\r\n  },\r\n  {\r\n    title: \"创建信息\",\r\n    dataIndex: \"buildTime\"\r\n  },\r\n  {\r\n    title: \"修改信息\",\r\n    dataIndex: \"updateTime\"\r\n  },\r\n]\r\n\r\nexport const regstrictColumns = [\r\n  {\r\n    title: \"限制车牌前缀\",\r\n    dataIndex: \"licensePrefix\",\r\n  },\r\n  {\r\n    title: \"限制说明\",\r\n    dataIndex: \"forbidReason\"\r\n  },\r\n  {\r\n    title: \"备注\",\r\n    dataIndex: \"remark\"\r\n  },\r\n  {\r\n    title: \"新增信息\",\r\n    dataIndex: \"buildTime\"\r\n  },\r\n  {\r\n    title: \"更新信息\",\r\n    dataIndex: \"updateTime\"\r\n  }\r\n]\r\n\r\nexport const elecfenceColumns = [\r\n  {\r\n    title: \"电子围栏状态\",\r\n    dataIndex: \"openState\",\r\n    render:(item:any)=>OpenState[item]\r\n  },\r\n  {\r\n    title: \"限制车辆\",\r\n    dataIndex: \"license\"\r\n  },\r\n  {\r\n    title: \"限制说明\",\r\n    dataIndex: \"openRemark\"\r\n  },\r\n  {\r\n    title: \"限制解除信息\",\r\n    dataIndex: \"closeTemId\"\r\n  },\r\n  {\r\n    title: \"限制解除说明\",\r\n    dataIndex: \"closeRemark\"\r\n  },\r\n  {\r\n    title: \"创建信息\",\r\n    dataIndex: \"openTime\"\r\n  }\r\n]","import React from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport { bindActionCreators } from \"redux\";\r\nimport {IProps} from \"@public/common/interface\"\r\nimport JCard from \"@public/components/JCard\"\r\nimport { Button, Popconfirm, Table } from \"antd\";\r\nimport { bwlistColumns } from \"../columns\";\r\nimport { getBwlist, changeBwlist} from \"@plate/actions/otherAction\";\r\nimport StatusElement from \"@public/components/Element/StatusElement\";\r\nimport SearchModular from \"@public/components/Modular/SearchModular\";\r\nimport AddModular from \"@public/components/Modular/AddModular\";\r\n\r\n\r\n\r\ninterface Props extends IProps {\r\n  bwlist:any;\r\n}\r\n\r\nlet params = {\r\n  current: 1,\r\n  license:\"\",\r\n  linkPhone:\"\",\r\n  linkName:\"\",\r\n  status: \"\",\r\n  type:\"\"\r\n}\r\n\r\nlet resetParams = {\r\n  current: 1,\r\n  license:\"\",\r\n  linkPhone:\"\",\r\n  linkName:\"\",\r\n  status: \"\",\r\n  type:\"\"\r\n}\r\n\r\n\r\nclass Bwlist extends React.Component<Props> {\r\n\r\n  state = {\r\n    addVisible: false,\r\n    editVisible: false,\r\n    detail: {id: \"\"}\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.actions.getBwlist(params)\r\n  }\r\n\r\n  getCol(){\r\n    return [...bwlistColumns, {\r\n      title: \"状态\",\r\n      dataIndex: \"status\",\r\n      render:(item:any, rows:any)=><StatusElement size=\"small\" notAll value={item} onChange={()=>{\r\n        this.props.actions.changeBwlist({\r\n          objective: \"enable\",\r\n          id: rows.id\r\n        }, (res:any)=>{\r\n          this.props.utils.OpenNotification(\"success\")\r\n          this.props.actions.getBwlist(params, {obj: res, type: \"edit\"})\r\n        })\r\n      }} />\r\n    },{\r\n      title: \"操作\",\r\n      render: (item:any)=>{\r\n        return (\r\n          <>\r\n            <Button type=\"link\" size=\"small\" onClick={()=>this.setState({editVisible: true, detail: item})} >编辑</Button>\r\n            <Popconfirm title=\"是否删除？\" onConfirm={()=>{\r\n              this.props.actions.changeBwlist({\r\n                objective: \"delete\",\r\n                id: item.id\r\n              }, (res:any)=>{\r\n                this.props.utils.OpenNotification(\"success\")\r\n                this.props.actions.getBwlist(params, {refresh: true})\r\n              })\r\n            }}>\r\n              <Button size=\"small\" type=\"link\">删除</Button>\r\n            </Popconfirm>\r\n          </>\r\n        )\r\n      }\r\n    }]\r\n  }\r\n\r\n  render() {\r\n    const {spinning, utils, bwlist } = this.props\r\n    const {addVisible, editVisible, detail } = this.state\r\n    \r\n    return (\r\n      <JCard spinning={spinning}> \r\n        <div key=\"a\">\r\n          <SearchModular\r\n            before={<Button type=\"primary\" onClick={()=>this.setState({addVisible: true})}>新增</Button>}\r\n            initialValues={params}\r\n            resetValues={resetParams}\r\n            submitSearch={(values:any)=>{\r\n              params = values?{...params,...values}:resetParams\r\n              this.props.actions.getBwlist(params)\r\n            }}\r\n            data={[\r\n              {label: \"车牌\", name: \"license\", type: \"input\"},\r\n              {label: \"联系人电话\", name: \"linkPhone\", type: \"input\"},\r\n              {label: \"联系人名称\", name: \"linkName\", type: \"input\"},\r\n              {label: \"名单类型\", name: \"type\", type: \"select\", selectList: [\r\n                {label:\"全部\", id: \"\"},\r\n                {label:\"白名单\", id: 0},\r\n                {label:\"黑名单\", id: 1},\r\n              ]},\r\n              {label: \"状态\", name: \"status\", type: <StatusElement/>},\r\n            ]}\r\n          />\r\n        </div>\r\n        <div key=\"b\">\r\n          <Table size=\"small\" columns={this.getCol()} dataSource={bwlist?utils.addIndex(bwlist.list):[]} \r\n          pagination={utils.Pagination(bwlist, page=>{\r\n            params.current = page\r\n            this.props.actions.getBwlist(params)\r\n          })} />\r\n        </div>\r\n\r\n        <AddModular\r\n          title=\"新增黑白名单\"\r\n          spinning={spinning}\r\n          visible={addVisible}\r\n          onCancel={()=>this.setState({addVisible: false})}\r\n          onOk={(values)=>{\r\n            this.props.actions.changeBwlist({\r\n              ...values,\r\n              objective: \"add\",\r\n            }, (res:any)=>{\r\n              this.props.utils.OpenNotification(\"success\")\r\n              this.props.actions.getBwlist(params, {refresh: true})\r\n              this.setState({addVisible: false})\r\n            })\r\n          }}\r\n          data={[\r\n            {label: \"名单类型\", name: \"type\", type: \"select\", selectList: [\r\n              {label:\"白名单\", id: 0},\r\n              {label:\"黑名单\", id: 1},\r\n            ], rules: true},\r\n            {label: \"车牌\", name: \"license\", type: \"input\", rules: true},\r\n            {label: \"联系人电话\", name: \"linkPhone\", type: \"input\", rules: true},\r\n            {label: \"联系人名称\", name: \"linkName\", type: \"input\", rules: true},\r\n            {label: \"状态\", name: \"status\", type: <StatusElement notAll />, rules: true},\r\n            {label: \"备注\", name: \"remark\", type: \"textarea\"},\r\n          ]}\r\n        />\r\n        <AddModular\r\n          title=\"编辑黑白名单\"\r\n          spinning={spinning}\r\n          visible={editVisible}\r\n          initialValues={detail}\r\n          onCancel={()=>this.setState({editVisible: false})}\r\n          onOk={(values)=>{\r\n            this.props.actions.changeBwlist({\r\n              ...values,\r\n              objective: \"update\",\r\n              id: detail.id\r\n            }, (res:any)=>{\r\n              this.props.utils.OpenNotification(\"success\")\r\n              this.props.actions.getBwlist(params, {obj: res, type: \"edit\"})\r\n              this.setState({editVisible: false})\r\n            })\r\n          }}\r\n          data={[\r\n            {label: \"名单类型\", name: \"type\", type: \"select\", selectList: [\r\n              {label:\"白名单\", id: 0},\r\n              {label:\"黑名单\", id: 1},\r\n            ], rules: true},\r\n            {label: \"车牌\", name: \"license\", type: \"input\", rules: true},\r\n            {label: \"联系人电话\", name: \"linkPhone\", type: \"input\", rules: true},\r\n            {label: \"联系人名称\", name: \"linkName\", type: \"input\", rules: true},\r\n            {label: \"状态\", name: \"status\", type: <StatusElement notAll />, rules: true},\r\n            {label: \"备注\", name: \"remark\", type: \"textarea\"},\r\n          ]}\r\n        />\r\n      </JCard>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchProps = (dispatch:any)=>{\r\n  return {\r\n    actions: bindActionCreators({getBwlist, changeBwlist}, dispatch)\r\n  }\r\n}\r\n\r\nconst mapStateProps = (state:any)=>{\r\n  return {\r\n    bwlist: state.other.bwlist,\r\n    utils: state.app.utils,\r\n    spinning: state.other.spinning\r\n  }\r\n}\r\n\r\nexport default connect(mapStateProps, mapDispatchProps)(Bwlist)"],"sourceRoot":""}