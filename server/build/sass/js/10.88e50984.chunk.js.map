{"version":3,"sources":["admin/actions/messageAction.ts","admin/views/message/template/index.tsx"],"names":["optionList","opt","a","options","dispatch","keyName","obj","next","type","refresh","key","url","JSON","stringify","data","isCache","MC","get","MESSAGE_LOADING_START","fetch","put","MESSAGE_LOADING_END","_","size","index","findIndex","list","o","id","assign","MESSAGE_LOADING_NOT","console","log","statusMessageSign","params","getState","method","deleteMessageSign","addMessageSign","getMessageSign","getMessagePackageSum","statusMessagePackage","editMessagePackage","addMessagePackage","deleteMessagePackage","addMessageNum","getMessagePackage","getMessageOrder","newParams","omit","startTime","time","moment","format","endTime","MessageTemplate","this","props","spinning","utils","React","Component","connect","state","app","message","actions","bindActionCreators"],"mappings":"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","file":"sass/js/10.88e50984.chunk.js","sourcesContent":["import {MESSAGE_LOADING_START, MESSAGE_LOADING_END, MESSAGE_LOADING_NOT} from \"@admin/constant/message\"\r\nimport {fetch} from \"@public/utils\"\r\nimport MC from \"memory-cache\"\r\nimport _ from \"lodash\"\r\nimport moment from \"moment\"\r\n\r\n/**\r\n * list API公共方法\r\n * \r\n */\r\ninterface OptionListProps{\r\n  options: any;\r\n  dispatch:any;\r\n  keyName: string;\r\n  obj?:any;\r\n  next?:(...arg0:any)=>void;\r\n  type?:string;  //\"add\" | \"edit\"\r\n  refresh?: boolean\r\n}\r\n\r\ninterface ParamsListProps{\r\n  params: any;\r\n  obj?:any;\r\n  next?:(...arg0:any)=>void;\r\n  type?:string;  //\"add\" | \"edit\"\r\n  refresh?: boolean\r\n}\r\n// options:any,keyName:string, obj?:any, next?:(...arg0:any)=>void\r\nconst optionList = async (opt: OptionListProps)=>{\r\n    const {options,dispatch, keyName, obj, next, type, refresh} = opt;\r\n    try{\r\n      let key = options.url+JSON.stringify(options.data)\r\n      let isCache = MC.get(key)\r\n      \r\n    if(!isCache || refresh){\r\n      dispatch({\r\n        type: MESSAGE_LOADING_START\r\n      })\r\n      let data:any = await fetch(options)\r\n      if(next)next(data)\r\n      MC.put(key, data)\r\n      dispatch({\r\n        type: MESSAGE_LOADING_END,\r\n        [keyName]: data\r\n      })\r\n    }else{\r\n      if(obj && _.size(obj)){\r\n        let index = _.findIndex(isCache.list, (o:any)=>o.id==obj.id)\r\n        if(type==\"edit\"){\r\n          isCache.list[index] = _.assign(isCache.list[index], obj);\r\n        }else if(type==\"add\"){\r\n          isCache.list[index] = _.assign(isCache.list[index], obj);\r\n        }\r\n\r\n        MC.put(key, isCache)\r\n        dispatch({\r\n          type: MESSAGE_LOADING_NOT,\r\n          [keyName]: isCache\r\n        })\r\n      }else{\r\n        dispatch({\r\n          type: MESSAGE_LOADING_NOT,\r\n          [keyName]: isCache\r\n        })\r\n      }\r\n      \r\n    }\r\n    \r\n  }catch(e){\r\n    console.log(e)\r\n    dispatch({type: MESSAGE_LOADING_END})\r\n  }\r\n  \r\n}\r\n\r\nexport const statusMessageSign = (params:any, next:Function)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    dispatch({\r\n      type: MESSAGE_LOADING_START,\r\n    })\r\n    try{\r\n      const options:any = {\r\n        url: \"/zlwj/api/system/sys/sys-sms-sign/updateStatus\",\r\n        method: \"post\",\r\n        data: params\r\n      }\r\n      let data:any = await fetch(options)\r\n      if(next)next(data)\r\n      dispatch({\r\n        type: MESSAGE_LOADING_END,\r\n      })\r\n      \r\n    }catch(e){\r\n      console.log(e)\r\n      dispatch({type: MESSAGE_LOADING_END})\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const deleteMessageSign = (params:any, next:Function)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    dispatch({\r\n      type: MESSAGE_LOADING_START,\r\n    })\r\n    try{\r\n      const options:any = {\r\n        url: \"/zlwj/api/system/sys/sys-sms-sign/delById\",\r\n        method: \"post\",\r\n        data: params\r\n      }\r\n      let data:any = await fetch(options)\r\n      if(next)next(data)\r\n      dispatch({\r\n        type: MESSAGE_LOADING_END,\r\n      })\r\n      \r\n    }catch(e){\r\n      console.log(e)\r\n      dispatch({type: MESSAGE_LOADING_END})\r\n    }\r\n  }\r\n}\r\n\r\nexport const addMessageSign = (params:any, next:Function)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    dispatch({\r\n      type: MESSAGE_LOADING_START,\r\n    })\r\n    try{\r\n      const options:any = {\r\n        url: \"/zlwj/api/system/sys/sys-sms-sign/save\",\r\n        method: \"post\",\r\n        data: params\r\n      }\r\n      let data:any = await fetch(options)\r\n      if(next)next(data)\r\n      dispatch({\r\n        type: MESSAGE_LOADING_END,\r\n      })\r\n      \r\n    }catch(e){\r\n      console.log(e)\r\n      dispatch({type: MESSAGE_LOADING_END})\r\n    }\r\n  }\r\n}\r\n\r\nexport const getMessageSign = (opt:any)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const {params, obj, next, type, refresh=false} = opt\r\n    const options:any = {\r\n      url: \"/zlwj/api/system/sys/sys-sms-sign/page\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n\r\n    optionList({\r\n      options,\r\n      dispatch,\r\n      keyName: \"signs\", obj, next, refresh, type})\r\n  }\r\n}\r\n\r\nexport const getMessagePackageSum = (opt:any)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const {params, obj, next, type, refresh=false} = opt\r\n    const options:any = {\r\n      url: \"/zlwj/api/system/sys/sys-company-sms/systemSmsNum\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n\r\n    optionList({\r\n      options,\r\n      dispatch,\r\n      keyName: \"packagesum\", obj, next, refresh, type})\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const statusMessagePackage = (params:any, next:Function)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    dispatch({\r\n      type: MESSAGE_LOADING_START,\r\n    })\r\n    try{\r\n      const options:any = {\r\n        url: \"/zlwj/api/system/sys/sys-sms-package/updateStatus\",\r\n        method: \"post\",\r\n        data: params\r\n      }\r\n      let data:any = await fetch(options)\r\n      if(next)next(data)\r\n      dispatch({\r\n        type: MESSAGE_LOADING_END,\r\n      })\r\n      \r\n    }catch(e){\r\n      console.log(e)\r\n      dispatch({type: MESSAGE_LOADING_END})\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const editMessagePackage = (params:any, next:Function)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    dispatch({\r\n      type: MESSAGE_LOADING_START,\r\n    })\r\n    try{\r\n      const options:any = {\r\n        url: \"/zlwj/api/system/sys/sys-sms-package/updateById\",\r\n        method: \"post\",\r\n        data: params\r\n      }\r\n      let data:any = await fetch(options)\r\n      if(next)next(data)\r\n      dispatch({\r\n        type: MESSAGE_LOADING_END,\r\n      })\r\n      \r\n    }catch(e){\r\n      console.log(e)\r\n      dispatch({type: MESSAGE_LOADING_END})\r\n    }\r\n  }\r\n}\r\n\r\nexport const addMessagePackage = (params:any, next:Function)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    dispatch({\r\n      type: MESSAGE_LOADING_START,\r\n    })\r\n    try{\r\n      const options:any = {\r\n        url: \"/zlwj/api/system/sys/sys-sms-package/save\",\r\n        method: \"post\",\r\n        data: params\r\n      }\r\n      let data:any = await fetch(options)\r\n      if(next)next(data)\r\n      dispatch({\r\n        type: MESSAGE_LOADING_END,\r\n      })\r\n      \r\n    }catch(e){\r\n      console.log(e)\r\n      dispatch({type: MESSAGE_LOADING_END})\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteMessagePackage = (params:any, next:Function)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    dispatch({\r\n      type: MESSAGE_LOADING_START,\r\n    })\r\n    try{\r\n      const options:any = {\r\n        url: \"/zlwj/api/system/sys/sys-sms-package/delById\",\r\n        method: \"post\",\r\n        data: params\r\n      }\r\n      let data:any = await fetch(options)\r\n      if(next)next(data)\r\n      dispatch({\r\n        type: MESSAGE_LOADING_END,\r\n      })\r\n      \r\n    }catch(e){\r\n      console.log(e)\r\n      dispatch({type: MESSAGE_LOADING_END})\r\n    }\r\n  }\r\n}\r\n\r\nexport const addMessageNum = (params:any, next:Function)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    dispatch({\r\n      type: MESSAGE_LOADING_START,\r\n    })\r\n    try{\r\n      const options:any = {\r\n        url: \"/zlwj/api/system/sys/sys-company-sms/addSystemSmsNum\",\r\n        method: \"post\",\r\n        data: params\r\n      }\r\n      let data:any = await fetch(options)\r\n      if(next)next(data)\r\n      dispatch({\r\n        type: MESSAGE_LOADING_END,\r\n      })\r\n      \r\n    }catch(e){\r\n      console.log(e)\r\n      dispatch({type: MESSAGE_LOADING_END})\r\n    }\r\n  }\r\n}\r\n\r\nexport const getMessagePackage = (opt:any)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n    const {params, obj, next, type, refresh=false} = opt\r\n    const options:any = {\r\n      url: \"/zlwj/api/system/sys/sys-sms-package/page\",\r\n      method: \"get\",\r\n      data: params\r\n    }\r\n\r\n    optionList({\r\n      options,\r\n      dispatch,\r\n      keyName: \"packages\", obj, next, refresh, type})\r\n  }\r\n}\r\n\r\nexport const getMessageOrder = (opt:any)=>{\r\n  return async (dispatch:Function, getState:any)=>{\r\n\r\n    const {params, obj, next, type, refresh=false} = opt\r\n    \r\n    let newParams = _.omit(params, \"time\")\r\n    \r\n    const options:any = {\r\n      url: \"/zlwj/api/system/sys/sys-sms-order/page\",\r\n      method: \"get\",\r\n      data: {...newParams, \r\n        startTime: params.time?moment(params.time[0]).format(\"YYYY-MM-DD\"):\"\",\r\n        endTime: params.time?moment(params.time[1]).format(\"YYYY-MM-DD\"):\"\",\r\n      }\r\n    }\r\n    optionList({\r\n      options,\r\n      dispatch,\r\n      keyName: \"orders\", obj, next, refresh, type})\r\n  }\r\n}","import React from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport { bindActionCreators } from \"redux\";\r\nimport {IProps} from \"@public/common/interface\"\r\nimport { } from \"@admin/actions/messageAction\"\r\nimport JCard from \"@admin/components/JCard\"\r\nimport { Card } from \"antd\";\r\n\r\ninterface Props extends IProps {\r\n\r\n}\r\n\r\nlet params = {\r\n  current: 1\r\n}\r\n\r\nclass MessageTemplate extends React.Component<Props> {\r\n\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  render() {\r\n    const {spinning, utils} = this.props\r\n\r\n    return (\r\n      <JCard spinning={spinning}>\r\n        <Card size=\"small\">\r\n\r\n        </Card>\r\n      </JCard>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchProps = (dispatch:any)=>{\r\n  return {\r\n    actions: bindActionCreators({ }, dispatch)\r\n  }\r\n}\r\n\r\nconst mapStateProps = (state:any)=>{\r\n  return {\r\n    utils: state.app.utils,\r\n    spinning: state.message.spinning\r\n  }\r\n}\r\n\r\nexport default connect(mapStateProps, mapDispatchProps)(MessageTemplate)"],"sourceRoot":""}