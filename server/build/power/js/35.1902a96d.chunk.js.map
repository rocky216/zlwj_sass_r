{"version":3,"sources":["power/views/permismenu/index.tsx"],"names":["rRoutes","Tree","TreeNode","_","cloneDeep","routes","Permismenu","arr","each","item","omit","children","length","tData","this","props","spinning","utils","size","extra","ghost","type","onClick","actions","saveSysMenusTree","treeDate","JSON","stringify","OpenNotification","showLine","defaultExpandAll","switcherIcon","treeData","React","Component","connect","state","app","dispatch","bindActionCreators"],"mappings":"gRAaIA,GAFeC,IAAZC,SAEOC,IAAEC,UAAUC,MAMpBC,E,oKAEEC,GAAW,IAAD,OAOd,OANAJ,IAAEK,KAAKD,GAAK,SAAAE,IACVA,EAAON,IAAEO,KAAKD,EAAM,CAAC,YAAa,QAAS,UACnCE,UAAYF,EAAKE,SAASC,OAAO,GACvC,EAAKC,MAAMJ,EAAKE,aAGbJ,I,+BAGC,IAAD,SACmBO,KAAKC,MAAxBC,EADA,EACAA,SAAUC,EADV,EACUA,MAEjB,OACE,kBAAC,IAAD,CAAOD,SAAUA,GACf,kBAAC,IAAD,CAAME,KAAK,QAAQC,MAAO,kBAAC,IAAD,CAAQC,OAAK,EAACC,KAAK,UAAUC,QAAS,WAC9D,EAAKP,MAAMQ,QAAQC,iBAAiB,CAClCH,KAAM,UACNI,SAAUC,KAAKC,UAAU3B,KACxB,WACDiB,EAAMW,iBAAiB,gBALD,iBAQxB,kBAAC,IAAD,CACEC,UAAQ,EACRC,kBAAgB,EAChBC,aAAc,kBAAC,IAAD,MACdC,SAAUf,EAAMJ,MAAMR,IAAO,OAAQ,KAAM,oB,GA7B9B4B,IAAMC,WAkDhBC,uBAPO,SAACC,GACrB,MAAO,CACLnB,MAAOmB,EAAMC,IAAIpB,MACjBD,SAAUoB,EAAMC,IAAIrB,aATC,SAACsB,GACxB,MAAO,CACLf,QAASgB,YAAmB,CAACf,sBAAmBc,MAWrCH,CAAyC7B","file":"power/js/35.1902a96d.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport { bindActionCreators } from \"redux\";\r\nimport {IProps} from \"@public/common/interface\"\r\nimport JCard from \"@public/components/JCard\"\r\nimport { Button, Card, Tree } from \"antd\";\r\nimport {routes} from \"@power/routers/routeData\"\r\nimport { DownOutlined } from \"@ant-design/icons\";\r\nimport _ from \"lodash\";\r\nimport {saveSysMenusTree} from \"@power/actions/appAction\"\r\n\r\nconst {TreeNode} = Tree\r\n\r\nlet rRoutes = _.cloneDeep(routes)\r\n\r\ninterface Props extends IProps {\r\n\r\n}\r\n\r\nclass Permismenu extends React.Component<Props> {\r\n\r\n  tData(arr:any[]){\r\n    _.each(arr, item=>{\r\n      item = _.omit(item, [\"component\", \"exact\", \"path\"])\r\n      if(item.children && item.children.length>0){\r\n        this.tData(item.children)\r\n      }\r\n    })\r\n    return arr;\r\n  }\r\n\r\n  render() {\r\n    const {spinning, utils} = this.props\r\n    \r\n    return (\r\n      <JCard spinning={spinning}> \r\n        <Card size=\"small\" extra={<Button ghost type=\"primary\" onClick={()=>{\r\n          this.props.actions.saveSysMenusTree({\r\n            type: \"systema\",\r\n            treeDate: JSON.stringify(rRoutes)\r\n          }, ()=>{\r\n            utils.OpenNotification(\"success\")\r\n          })\r\n        }} >保存</Button>} >\r\n          <Tree\r\n            showLine\r\n            defaultExpandAll\r\n            switcherIcon={<DownOutlined />}\r\n            treeData={utils.tData(routes,\"name\", \"id\", \"children\")}\r\n          />\r\n        </Card>\r\n      </JCard>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchProps = (dispatch:any)=>{\r\n  return {\r\n    actions: bindActionCreators({saveSysMenusTree}, dispatch)\r\n  }\r\n}\r\n\r\nconst mapStateProps = (state:any)=>{\r\n  return {\r\n    utils: state.app.utils,\r\n    spinning: state.app.spinning\r\n  }\r\n}\r\n\r\nexport default connect(mapStateProps, mapDispatchProps)(Permismenu)"],"sourceRoot":""}